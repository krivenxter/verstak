// === –î–ê–ù–ù–´–ï ===
const PHRASES = [
  ["–º–æ–Ω–∏—Ç–æ—Ä–∞","–±–ª–∏–∫"],["—Ñ–æ—Ç–æ—à–æ–ø–∞","—Ç–µ–Ω—å"],["–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã","–ø—ã–ª—å"],
  ["–¥–∏—Å–∫–∞","—Ü–∞—Ä–∞–ø–∏–Ω–∞"],["–ø–ª–µ–µ—Ä–∞","—à—É–º"],["–∫–∞—Å—Å–µ—Ç—ã","—Ç—Ä–µ—Å–∫"],
  ["—ç–∫—Ä–∞–Ω–∞","–±–ª–∏–∫"],["–æ–±–æ–µ–≤","–≥—Ä–∞–¥–∏–µ–Ω—Ç"],["–±–∞–Ω–Ω–µ—Ä–∞","–ø–∏–∫—Å–µ–ª—å"],
  ["–¥–∂–∏–Ω—Å–æ–≤","–∫–ª—ë—à"],["–ø–∞–ø–∏–Ω–æ","–º–æ–ª–æ–∫–æ"], ["–ª–æ–≥–æ—Ç–∏–ø–∞","–æ—Ç–±–ª–µ—Å–∫"],["–ø–µ–π–¥–∂–µ—Ä–∞","—Å–∏–≥–Ω–∞–ª"],
  ["–¥–∏—Å–∫–æ–≤–æ–¥–∞","—Å—Ç—É–∫"],["–æ–±–ª–æ–∂–∫–∏","–±–ª–µ—Å–∫"],["–º–æ–¥–µ–º–∞","–ø–∏—Å–∫"],
  ["–ø—Ä–∏–Ω—Ç–µ—Ä–∞","–∑–∞–ø–∞—Ö"],["—Å–∞–π—Ç–∞","—Ñ–æ–Ω"],["–∫—É—Ä—Å–æ—Ä–∞","—Å–ª–µ–¥"],
  ["–æ–±–æ–µ–≤","—É–∑–æ—Ä"],["–∫–∞—Å—Å–µ—Ç–Ω–∏–∫–∞","—Å–∫—Ä–∏–ø"],
];

const FONT_POOL = [
  'Ruslan Display','Stalinist One','Yeseva One','Kelly Slab','Unbounded',
  'Forum','Alice','Kurale','Philosopher','Poiret One','Lobster','Marck Script',
  'IBM Plex Mono','JetBrains Mono','PT Mono','Noto Sans Mono','Anonymous Pro',
  'Oswald','Rubik','Montserrat','Exo 2','Play','Tenor Sans','Didact Gothic','Jura','Ubuntu',
  'Cormorant Garamond','Playfair Display','PT Serif','Noto Serif Display','Oranienbaum','Bitter',
  'PT Sans','Roboto','Neucha','Comfortaa','Russo One',
  'Comforter','Great Vibes','Manrope','Oi','Pixelify Sans','Rubik Iso','Rubik Puddles','Rubik Wet Paint',
  'Tektur','Viaoda Libre'
];

const SANS_POOL = [ 'Inter' ];

// === –®–û–†–¢–ö–ê–¢–´ ===
const stage         = document.getElementById('stage');
const overlay       = document.getElementById('overlay');
const composition   = document.getElementById('composition');
const line1         = document.getElementById('line1');
const line2         = document.getElementById('line2');
const decors        = document.getElementById('decors');
const custom        = document.getElementById('custom');
const bgLayer       = document.getElementById('bgLayer');
const grain         = document.getElementById('grain');

const silhouetteFill   = document.getElementById('silhouetteFill');
const silhouetteStroke = document.getElementById('silhouetteStroke');

const btnGenerate   = document.getElementById('btn');
const btnRound      = document.getElementById('round');
const btnDownload   = document.getElementById('download');
const btnMoveUp     = document.getElementById('moveUp');
const btnMoveDown   = document.getElementById('moveDown');
const btnCringe     = document.getElementById('cringe');
const btnCrosses    = document.getElementById('crosses');
const btnMicro      = document.getElementById('micro');
const btnInvert     = document.getElementById('invert');
const btnBg         = document.getElementById('bgBtn');
const inpBgUpload   = document.getElementById('bgUpload');
const btnBgClear    = document.getElementById('bgClear');
const btnGradToggle = document.getElementById('gradToggle');
const btnGradClose  = document.getElementById('gradClose');
const btnGradDone   = document.getElementById('gradDone');
const btnGradClear  = document.getElementById('gradClear');
const btnUndo       = document.getElementById('undoAll');

const btnColorToggle = document.getElementById('colorToggle');
const colorModal     = document.getElementById('colorModal');
const colorPick      = document.getElementById('colorPick');
const colorAlpha     = document.getElementById('colorAlpha');
const colorClose     = document.getElementById('colorClose');
const colorDone      = document.getElementById('colorDone');

const strokeToggle        = document.getElementById('strokeToggle');
const strokeColorInput    = document.getElementById('strokeColor');     // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å –≤ –º–æ–¥–∞–ª–∫–µ)
const strokeWidthInput    = document.getElementById('strokeWidth');     // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
const strokeEnabledInput  = document.getElementById('strokeEnabled');   // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

// –ì—Ä–∞–¥–∏–µ–Ω—Ç-–º–æ–¥–∞–ª–∫–∞
const gradModal   = document.getElementById('gradModal');
const gradA       = document.getElementById('gradA');
const gradB       = document.getElementById('gradB');
const gradC       = document.getElementById('gradC');
const gradAngle   = document.getElementById('gradAngle');
const gradBias1   = document.getElementById('gradBias1');
const gradBias2   = document.getElementById('gradBias2');
const gradNoise   = document.getElementById('gradNoise');
const gradNoiseSize = document.getElementById('gradNoiseSize');

// ===== –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –ø–æ —à–∏—Ä–∏–Ω–µ stage =====
const FS_MIN = 20;
const FS_MAX = 102;
const FS_K   = 0.12;

let silAlpha = 1; // —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –Ω–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–∏–ª—É—ç—Ç–∞ [0..1]

let currentInk   = '#111111';
let currentBgUrl = '';
let currentBgBlobUrl = ''; 

// ===== –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏–ª—É—ç—Ç–∞/–æ–±–≤–æ–¥–∫–∏/—à—É–º–∞ =====
let isRounded       = false;
let maskURL         = '';
let liveStrokeOn    = false;      // –æ–±–≤–æ–¥–∫–∞ –Ω–∞ ¬´–∂–∏–≤–æ–π¬ª –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ –¥–æ —Å–∏–ª—É—ç—Ç–∞
let strokeOnSil     = false;      // –æ–±–≤–æ–¥–∫–∞ –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞ –ø–æ—Å–ª–µ ¬´–°–∏–ª—É—ç—Ç–∞¬ª
let strokeColor     = '#00ff88';
let strokeWidthPx   = 10;
let strokeEnabled   = false;      // –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —á–µ–∫–±–æ–∫—Å –≤ –º–æ–¥–∞–ª–∫–µ
let strokeMaskURL   = '';         // –∫—ç—à –∫–æ–ª—å—Ü–µ–≤–æ–π –º–∞—Å–∫–∏

let noiseURL        = '';         // dataURL —Ç–∞–π–ª–∞ —à—É–º–∞
let noiseIntensity  = 0;          // 0..1
let noiseSizePx     = 480;        // –ò–ó–ù–ê–ß–ê–õ–¨–ù–´–ô –∫—Ä—É–ø–Ω—ã–π —Ç–∞–π–ª (px)

// ===== –°–¥–≤–∏–≥ –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏ =====
let compShiftState = 0;           // -1 = –≤–Ω–∏–∑, 0 = —Ü–µ–Ω—Ç—Ä, 1 = –≤–≤–µ—Ä—Ö
const SHIFT_FACTOR = 0.35;

// === –£–¢–ò–õ–´ ===
const rand    = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
const sample  = (arr) => arr[rand(0, arr.length - 1)];
const shuffle = (arr) => arr.map(v=>[Math.random(), v]).sort((a,b)=>a[0]-b[0]).map(x=>x[1]);
const pickFonts = () => shuffle([...FONT_POOL]).slice(0, rand(3,6));
const clamp  = (v,min,max)=>Math.max(min,Math.min(max,v));


// ---- i18n ----
let currentLang = localStorage.getItem('lang') || 'en';

// –¢–µ–∫—Å—Ç—ã
const I18N = {
  ru: {
    title: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–∑–∏—Ü–∏–π',
    generate: '–°–≥–µ–Ω–µ—Ä–∏—Ç—å',
    placeholder: '–í–∞—à –¢–µ–∫—Å—Ç',
    up: '‚ñ≤',
    down: '‚ñº',
    gradient: '–ì—Ä–∞–¥–∏–µ–Ω—Ç',
    invert: '–ë–µ–ª—ã–π / —á—ë—Ä–Ω—ã–π',
    micro: '–ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç',
    bubbles: '–ü—É–∑—ã—Ä–∏',
    crosses: '–ö—Ä–µ—Å—Ç—ã',
    bg_on: '–§–æ–Ω ‚úì',
    bg_off: '–§–æ–Ω √ó',
    color: '–¶–≤–µ—Ç',
    stroke: '–û–±–≤–æ–¥–∫–∞',
    silhouette: '–°–∏–ª—É—ç—Ç',
    undo: '–í–µ—Ä–Ω—É—Ç—å',
    download: '–°–∫–∞—á–∞—Ç—å',
    grad_title: '–ì—Ä–∞–¥–∏–µ–Ω—Ç —Ñ–æ–Ω–∞',
    grad_c1: '–¶–≤–µ—Ç 1',
    grad_c2: '–¶–≤–µ—Ç 2',
    grad_c3: '–¶–≤–µ—Ç 3',
    grad_angle: '–£–≥–æ–ª (¬∞)',
    grad_bias1: '–°–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –¶–≤–µ—Ç 1 –∏ –¶–≤–µ—Ç 2 (%)',
    grad_bias2: '–°–º–µ—â–µ–Ω–∏–µ –º–µ–∂–¥—É –¶–≤–µ—Ç 2 –∏ –¶–≤–µ—Ç 3 (%)',
    grad_noise: '–®—É–º (–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å %)',
    grad_noise_size: '–†–∞–∑–º–µ—Ä –∑–µ—Ä–Ω–∞ (px)',
    grad_random: 'üé≤ –ó–∞—Ä–∞–Ω–¥–æ–º–∏—Ç—å',
    grad_clear: '–£–±—Ä–∞—Ç—å –≥—Ä–∞–¥–∏–µ–Ω—Ç',
    done: '–ì–æ—Ç–æ–≤–æ',
    color_title: '–¶–≤–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ü–∏–∏',
    color_fill: '–¶–≤–µ—Ç',
    color_alpha: '–ù–µ–ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–∏–ª—É—ç—Ç–∞ (%)',
    stroke_color: '–¶–≤–µ—Ç –æ–±–≤–æ–¥–∫–∏',
    stroke_width: '–¢–æ–ª—â–∏–Ω–∞ –æ–±–≤–æ–¥–∫–∏ (px)',
    stroke_enabled: '–û–±–≤–æ–¥–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞',
    credit_label: '–ù–∞–≤–∞–π–±–∫–æ–¥–∏–ª: ',
     credit_name: '–û–ª–µ–≥ –ö—Ä–∏–≤–µ–Ω–∫–æ',
    questions: '–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º —Å—é–¥–∞',
    micro_prompt_title: '–ú–µ–ª–∫–∏–π —Ç–µ–∫—Å—Ç (—Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª):',
micro_prompt_default: '—à—ë–ø–æ—Ç –ø–æ–¥ –±—É–∫–≤–∞–º–∏',

  },
  en: {
    title: 'Typo Composition Generator',
    generate: 'Generate',
    placeholder: 'Your Text',
    up: '‚ñ≤',
    down: '‚ñº',
    gradient: 'Gradient',
    invert: 'White / Black',
    micro: 'Small text',
    bubbles: 'Bubbles',
    crosses: 'Crosses',
    bg_on: 'BG ‚úì',
    bg_off: 'BG √ó',
    color: 'Color',
    stroke: 'Stroke',
    silhouette: 'Silhouette',
    undo: 'Undo',
    download: 'Download',
    grad_title: 'Background Gradient',
    grad_c1: 'Color 1',
    grad_c2: 'Color 2',
    grad_c3: 'Color 3',
    grad_angle: 'Angle (¬∞)',
    grad_bias1: 'Offset between Color 1 & 2 (%)',
    grad_bias2: 'Offset between Color 2 & 3 (%)',
    grad_noise: 'Noise (intensity %)',
    grad_noise_size: 'Grain size (px)',
    grad_random: 'üé≤ Randomize',
    grad_clear: 'Remove gradient',
    done: 'Done',
    color_title: 'Composition Color',
    color_fill: 'Fill',
    color_alpha: 'Silhouette opacity (%)',
    stroke_color: 'Stroke color',
    stroke_width: 'Stroke width (px)',
    stroke_enabled: 'Stroke enabled',
    credit_label: 'Vibecoded by',
    credit_name: 'Oleg Krivenko',
    questions: 'Contact & Troubleshooting',
    micro_prompt_title: 'Small text (space-separated words):',
micro_prompt_default: 'whisper under letters',
  }
};

// –ö–∞–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –ø–µ—Ä–µ—Ç–µ–∫—Å—Ç–æ–≤—ã–≤–∞—Ç—å (—Å–µ–ª–µ–∫—Ç–æ—Ä ‚Üí –∫–ª—é—á)
const I18N_MAP = [
  ['.header h1','title'],
  ['#btn','generate'],
  ['#custom::placeholder','placeholder'],
  ['#moveUp','up'],
  ['#moveDown','down'],
  ['#gradToggle','gradient'],
  ['#invert','invert'],
  ['#micro','micro'],
  ['#cringe','bubbles'],
  ['#crosses','crosses'],
  ['#bgBtn','bg_on'],
  ['#bgClear','bg_off'],
  ['#colorToggle','color'],
  ['#strokeToggle','stroke'],
  ['#round','silhouette'],
  ['#undoAll','undo'],
  ['#download','download'],
['.who-3','credit_label'],  // –ª–µ–π–±–ª —Å–ª–µ–≤–∞ –æ—Ç —Å—Å—ã–ª–∫–∏
['a','credit_name'],
  ['.who-1 a','questions'],

  // –ú–æ–¥–∞–ª–∫–∞ –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞
  ['#gradTitle','grad_title'],
  ['label[for="gradA"]','grad_c1'],
  ['label[for="gradB"]','grad_c2'],
  ['label[for="gradC"]','grad_c3'],
  ['label[for="gradAngle"]','grad_angle'],
  ['label[for="gradBias1"]','grad_bias1'],
  ['label[for="gradBias2"]','grad_bias2'],
  ['label[for="gradNoise"]','grad_noise'],
  ['label[for="gradNoiseSize"]','grad_noise_size'],
  ['#gradRandom','grad_random'],
  ['#gradClear','grad_clear'],
  ['#gradDone','done'],

  // –ú–æ–¥–∞–ª–∫–∞ —Ü–≤–µ—Ç–∞/–æ–±–≤–æ–¥–∫–∏
  ['#colorTitle','color_title'],
  ['label[for="colorPick"]','color_fill'],
  ['label[for="colorAlpha"]','color_alpha'],
  ['label[for="strokeColor"]','stroke_color'],
  ['label[for="strokeWidth"]','stroke_width'],
  ['label[for="strokeEnabled"]','stroke_enabled'],
];

// –ü—Ä–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞ —á–µ—Ä–µ–∑ –∞—Ç—Ä–∏–±—É—Ç
function setPlaceholder(el, text){
  if (el) el.setAttribute('placeholder', text);
}

// --- –ú–∞–ø–ø–∏–Ω–≥ "input id" -> –∫–ª—é—á —Å–ª–æ–≤–∞—Ä—è ---
const I18N_LABELS_BY_INPUT = {
  // –ì—Ä–∞–¥–∏–µ–Ω—Ç
  gradA: 'grad_c1',
  gradB: 'grad_c2',
  gradC: 'grad_c3',
  gradAngle: 'grad_angle',
  gradBias1: 'grad_bias1',
  gradBias2: 'grad_bias2',
  gradNoise: 'grad_noise',
  gradNoiseSize: 'grad_noise_size',

  // –ú–æ–¥–∞–ª–∫–∞ —Ü–≤–µ—Ç–∞/–æ–±–≤–æ–¥–∫–∏
  colorPick: 'color_fill',
  colorAlpha: 'color_alpha',
  strokeColor: 'stroke_color',
  strokeWidth: 'stroke_width',
  strokeEnabled: 'stroke_enabled',
};

// –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª —É <label>, –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ—Ä–∞—á–∏–≤–∞–µ—Ç input
function setWrappingLabelText(inputId, text){
  const input = document.getElementById(inputId);
  if (!input) return;
  const label = input.closest('label');
  if (!label) return;

  // –∏—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ
  for (const node of label.childNodes){
    if (node.nodeType === Node.TEXT_NODE){
      node.nodeValue = text + ' ';
      return;
    }
  }
  // –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ –Ω–∞—à–ª–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ prepend
  label.prepend(document.createTextNode(text + ' '));
}


function applyLang(lang){
  currentLang = lang;
  localStorage.setItem('lang', lang);
  const t = I18N[lang];

  I18N_MAP.forEach(([sel, key])=>{
    if (sel.endsWith('::placeholder')){
      const realSel = sel.replace('::placeholder','');
      setPlaceholder(document.querySelector(realSel), t[key]);
    } else {
      const el = document.querySelector(sel);
      if (!el) return;
      // –ö–Ω–æ–ø–∫–∏ —Å –∏–∫–æ–Ω–∫–∞–º–∏ –º–æ–≥—É—Ç –∏–º–µ—Ç—å –≤–ª–æ–∂–µ–Ω–Ω—ã–µ SVG ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ –º–µ–Ω—è—Ç—å textContent,
      // –Ω–æ –µ—Å–ª–∏ –≤–Ω—É—Ç—Ä–∏ –∏–∫–æ–Ω–∫–∞, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª:
      if (el.childElementCount === 0) {
        el.textContent = t[key];
      } else {
        // –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∫–æ–Ω–∫–∏/—Å–ø–∞–Ω—ã: –º–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª
        let changed = false;
        for (const node of el.childNodes){
          if (node.nodeType === Node.TEXT_NODE){
            node.nodeValue = ' ' + t[key] + ' ';
            changed = true;
            break;
          }
        }
        if (!changed) el.prepend(document.createTextNode(t[key] + ' '));
      }
    }
  });
  
  // –ü—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è <label>, –∫–æ—Ç–æ—Ä—ã–µ –æ–±–æ—Ä–∞—á–∏–≤–∞—é—Ç inputs
for (const [inputId, key] of Object.entries(I18N_LABELS_BY_INPUT)){
  setWrappingLabelText(inputId, t[key]);
}


  // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —è–∑—ã–∫–∞
 document.querySelectorAll('.lang-btn').forEach(b=>{
    b.classList.toggle('active', b.dataset.lang === lang);
  });
 // —á—Ç–æ–±—ã <html lang="..."> –≤—Å–µ–≥–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —è–∑—ã–∫—É
document.documentElement.setAttribute('lang', lang);
  document.documentElement.classList.add('i18n-ready');
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
document.addEventListener('click', (e)=>{
  const btn = e.target.closest('.lang-btn');
  if (!btn) return;
  applyLang(btn.dataset.lang);
});

applyLang(currentLang);

function mixedCase(word){
  return Array.from(word).map(ch =>
    /[A-Za-z–ê-–Ø–∞-—è–Å—ë]/.test(ch) ? (Math.random() < 0.3 ? ch.toUpperCase() : ch.toLowerCase()) : ch
  ).join('');
}

function renderWord(el, word, fonts){
  el.innerHTML = '';
  const chunk = rand(1,3);
  const isMobile = window.innerWidth <= 640;

  Array.from(word).forEach((ch, i) => {
    const span = document.createElement('span');
    span.className = 'ch';
    const font = fonts[Math.floor(i / chunk) % fonts.length];
    span.style.fontFamily = `'${font}', sans-serif`;

    const scale = isMobile ? rand(142, 242) / 100 : rand(82, 182) / 100;
    span.style.fontSize = scale + 'em';
    span.style.fontWeight = rand(1,3) ? 900 : 500;
    const skew = rand(-20, 5);
    span.style.transform = `rotate(0deg) skew(${skew}deg)`;
    span.textContent = ch;
    el.appendChild(span);
  });
}

function getCustomLines(){
  const t = (custom?.value || '').trim();
  if (!t) return null;
  const parts = t.split(/\r?\n/).slice(0,2);
  return parts.length === 1 ? [parts[0], ''] : parts;
}

function updateFontSize() {
  const w = stage?.getBoundingClientRect().width || 0;
  const size = Math.min(FS_MAX, Math.max(FS_MIN, w * FS_K));
  if (line1) line1.style.fontSize = size + 'px';
  if (line2) line2.style.fontSize = size + 'px';
}

// —Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ, –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–∑–º–µ—Ä–æ–≤ stage
if (stage){
  const ro = new ResizeObserver(() => requestAnimationFrame(updateFontSize));
  ro.observe(stage);
}
document.fonts?.ready?.then(updateFontSize);

// ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–û–ï –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê =====
function loadImage(src){
  return new Promise((resolve, reject)=>{
    const img = new Image();
    img.crossOrigin = 'anonymous';
    img.onload = ()=>resolve(img);
    img.onerror = reject;
    img.src = src;
  });
}

function paintGradient(ctx, w, h, gradientStr){
  const m = gradientStr.match(/linear-gradient\(([-\d.]+)deg\s*,([\s\S]+)\)$/i);
  const angle = m ? parseFloat(m[1]) : 135;
  const stopsStr = m ? m[2] : '#000 0%, #fff 100%';

  const stopRegex = /(rgba?\([^)]+\)|#[0-9a-f]{3,8})\s*(\d+)%/ig;
  const stops = [];
  let s;
  while ((s = stopRegex.exec(stopsStr)) !== null){
    stops.push({ color: s[1], pos: Math.min(100, Math.max(0, parseFloat(s[2]))) });
  }
  if (!stops.length){ stops.push({color:'#000',pos:0},{color:'#fff',pos:100}); }

  const rad = angle * Math.PI/180;
  const L = Math.max(w, h);
  const cx = w/2, cy = h/2;
  const dx = Math.cos(rad)*L, dy = Math.sin(rad)*L;

  const g = ctx.createLinearGradient(cx-dx, cy-dy, cx+dx, cy+dy);
  stops.forEach(st=>g.addColorStop(st.pos/100, st.color));
  ctx.fillStyle = g;
  ctx.fillRect(0,0,w,h);
}

// === –°–ò–õ–£–≠–¢: –°–ë–†–û–° ===
function clearSilhouetteFill(){
  silhouetteFill?.classList.remove('active');
  if (silhouetteFill){
    silhouetteFill.style.background = '';
    silhouetteFill.style.backgroundImage = '';
    silhouetteFill.style.webkitMaskImage = '';
    silhouetteFill.style.maskImage = '';
  }
}

function resetRoundState({force=false} = {}) {
  if (!force && isRounded) return;

  isRounded = false;
  maskURL = '';

  if (overlay){
    overlay.hidden = true;
    overlay.style.backgroundImage = '';
    overlay.style.backgroundColor = '';
    overlay.classList.remove('threshold-only');
    overlay.style.transform = '';
  }

  if (silhouetteStroke){
    silhouetteStroke.classList.remove('active');
    silhouetteStroke.style.background = '';
    silhouetteStroke.style.webkitMaskImage = '';
    silhouetteStroke.style.maskImage = '';
    silhouetteStroke.style.transform = '';
  }
  strokeMaskURL = '';

  clearSilhouetteFill();

  if (composition) composition.style.visibility = 'visible';
  if (btnUndo) btnUndo.hidden = true;
}

// === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ö–û–ú–ü–û–ó–ò–¶–ò–ò ===
function removeMicro(){
  const m = composition?.querySelector('.micro-row');
  if (m) m.remove();
}

function generate(){
  resetRoundState({force:true});
  removeMicro();
  stage?.querySelectorAll('.ch.outlined').forEach(n => n.classList.remove('outlined'));
  
  const PHRASES_RU = [
  ["–º–æ–Ω–∏—Ç–æ—Ä–∞","–±–ª–∏–∫"],["—Ñ–æ—Ç–æ—à–æ–ø–∞","—Ç–µ–Ω—å"],["–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã","–ø—ã–ª—å"],
  ["–¥–∏—Å–∫–∞","—Ü–∞—Ä–∞–ø–∏–Ω–∞"],["–ø–ª–µ–µ—Ä–∞","—à—É–º"],["–∫–∞—Å—Å–µ—Ç—ã","—Ç—Ä–µ—Å–∫"],
  ["—ç–∫—Ä–∞–Ω–∞","–±–ª–∏–∫"],["–æ–±–æ–µ–≤","–≥—Ä–∞–¥–∏–µ–Ω—Ç"],["–±–∞–Ω–Ω–µ—Ä–∞","–ø–∏–∫—Å–µ–ª—å"],
  ["–¥–∂–∏–Ω—Å–æ–≤","–∫–ª—ë—à"],["–ø–∞–ø–∏–Ω–æ","–º–æ–ª–æ–∫–æ"],["–ª–æ–≥–æ—Ç–∏–ø–∞","–æ—Ç–±–ª–µ—Å–∫"],["–ø–µ–π–¥–∂–µ—Ä–∞","—Å–∏–≥–Ω–∞–ª"],
  ["–¥–∏—Å–∫–æ–≤–æ–¥–∞","—Å—Ç—É–∫"],["–æ–±–ª–æ–∂–∫–∏","–±–ª–µ—Å–∫"],["–º–æ–¥–µ–º–∞","–ø–∏—Å–∫"],
  ["–ø—Ä–∏–Ω—Ç–µ—Ä–∞","–∑–∞–ø–∞—Ö"],["—Å–∞–π—Ç–∞","—Ñ–æ–Ω"],["–∫—É—Ä—Å–æ—Ä–∞","—Å–ª–µ–¥"],
  ["–æ–±–æ–µ–≤","—É–∑–æ—Ä"],["–∫–∞—Å—Å–µ—Ç–Ω–∏–∫–∞","—Å–∫—Ä–∏–ø"],
];

const PHRASES_EN = [
  ["monitor","glare"],["photoshop","shadow"],["keyboard","dust"],
  ["disc","scratch"],["player","noise"],["cassette","creak"],
  ["screen","gloss"],["wallpaper","gradient"],["banner","pixel"],
  ["jeans","flare"],["dad‚Äôs","milk"],["logo","shine"],["pager","signal"],
  ["drive","knock"],["cover","sparkle"],["modem","beep"],
  ["printer","smell"],["site","background"],["cursor","trail"],
  ["wallpaper","pattern"],["tape","squeak"],
];


  const customLines = getCustomLines();
 const pool = currentLang === 'en' ? PHRASES_EN : PHRASES_RU;
const [w1, w2] = customLines ?? sample(pool);
  const fonts = pickFonts();

  if (line1) renderWord(line1, mixedCase(w1), fonts);
  if (line2) renderWord(line2, mixedCase(w2), fonts);

  document.querySelector('.l1')?.style && (document.querySelector('.l1').style.letterSpacing = rand(-3, -2) + 'px');
  document.querySelector('.l2')?.style && (document.querySelector('.l2').style.letterSpacing = rand(-3, -2) + 'px');

  if (composition) composition.style.visibility = 'visible';
  if (overlay) overlay.style.transform = '';

  applyCompositionShift();
  updateFontSize();

  currentInk = stage?.classList.contains('light') ? '#ffffff' : '#000000';
  if (composition) composition.style.color = currentInk;

  if (btnUndo) btnUndo.hidden = true;
}

// === –û–ë–í–û–î–ö–ê (–ñ–ò–í–ê–Ø) –î–û –°–ò–õ–£–≠–¢–ê ===
function applyLiveStroke(){
  if (!composition) return;
  if (liveStrokeOn){
    composition.classList.add('with-stroke');
    composition.style.setProperty('--stroke-color', strokeColor);
    composition.style.setProperty('--stroke-w', strokeWidthPx + 'px');
  } else {
    composition.classList.remove('with-stroke');
    composition.style.removeProperty('--stroke-color');
    composition.style.removeProperty('--stroke-w');
  }
}



// === –ü–û–°–¢–†–û–ï–ù–ò–ï –ö–û–õ–¨–¶–ï–í–û–ô –ú–ê–°–ö–ò (–¥–ª—è –æ–±–≤–æ–¥–∫–∏ –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞) ===
async function buildOuterStrokeMask(baseMaskURL, growPx){
  if (!baseMaskURL || growPx <= 0) return '';
  const srcImg = await loadImage(baseMaskURL);
  const w = srcImg.width, h = srcImg.height;

  const c   = document.createElement('canvas'); c.width = w; c.height = h;
  const ctx = c.getContext('2d');

  // 1) —Ä–∞—Å–∫–ª–∞–¥—ã–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—É—é –º–∞—Å–∫—É (–±–∏–Ω–∞—Ä–Ω–∞—è –∞–ª—å—Ñ–∞)
  const src = document.createElement('canvas'); src.width = w; src.height = h;
  const sctx = src.getContext('2d');
  sctx.drawImage(srcImg, 0, 0, w, h);

  // 2) "–¥–∏–ª–∞—Ç–∞—Ü–∏—è" –±–µ–∑ blur: –º–Ω–æ–≥–æ–∫—Ä–∞—Ç–Ω—ã–µ —Å–º–µ—â–µ–Ω–∏—è
  // —à–∞–≥ –±–µ—Ä—ë–º –ø–æ–º–µ–ª—å—á–µ, —á—Ç–æ–±—ã –∫—Ä–∞–π –±—ã–ª —Ä–æ–≤–Ω—ã–π
  const r = Math.max(1, Math.round(growPx * 1)); // —á—É—Ç—å —Ç–æ–ª—â–µ –∏ –º—è–≥—á–µ

  const step = Math.max(1, Math.round(r / 3)); // —á–µ–º –±–æ–ª—å—à–µ r, —Ç–µ–º –±–æ–ª—å—à–µ —Å–º–µ—â–µ–Ω–∏–π
  ctx.clearRect(0,0,w,h);

  // —Ü–µ–Ω—Ç—Ä
  ctx.drawImage(src, 0, 0);

  // 8 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π + –¥–∏–∞–≥–æ–Ω–∞–ª–∏
  for (let dy = -r; dy <= r; dy += step){
    for (let dx = -r; dx <= r; dx += step){
      if (dx === 0 && dy === 0) continue;
      ctx.drawImage(src, dx, dy);
    }
  }

  // 3) –±–∏–Ω–∞—Ä–∏–∑—É–µ–º (–∞–ª—å—Ñ—É -> 0/255)
  const imgData = ctx.getImageData(0,0,w,h);
  const a = imgData.data;
  for (let i=0;i<a.length;i+=4){
    const alpha = a[i+3] > 0 ? 255 : 0;
    a[i]=255; a[i+1]=255; a[i+2]=255; a[i+3]=alpha;
  }
  ctx.putImageData(imgData,0,0);

  // 4) –≤—ã—á–∏—Ç–∞–µ–º –∏—Å—Ö–æ–¥–Ω–∏–∫ -> –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª—å—Ü–æ
  ctx.globalCompositeOperation = 'destination-out';
  ctx.drawImage(src, 0, 0);
  ctx.globalCompositeOperation = 'source-over';

  return c.toDataURL('image/png');
}


document.querySelector('label[for="strokeEnabled"]')?.addEventListener('click', e=>{
  e.preventDefault();
  strokeEnabledInput.checked = !strokeEnabledInput.checked;
  strokeEnabledInput.dispatchEvent(new Event('change',{bubbles:true}));
});


function forceRepaint(el){
  // —Ö–∞–∫ –¥–ª—è iOS Safari: –∫–æ—Ä–æ—Ç–∫–∏–π translateZ –∏ —á—Ç–µ–Ω–∏–µ offsetHeight
  if (!el) return;
  const prev = el.style.transform;
  el.style.transform = (prev ? prev + ' ' : '') + 'translateZ(0)';
  // —Ç—Ä–∏–≥–≥–µ—Ä–∏–º layout
  void el.offsetHeight;
  // –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º
  el.style.transform = prev || '';
}

async function applySilhouetteStroke(){
  if (!silhouetteStroke) return;

  // –≤—ã–∫–ª—é—á–µ–Ω–∏–µ
  if (!isRounded || !maskURL || !strokeOnSil || strokeWidthPx <= 0){
    silhouetteStroke.classList.remove('active');
    // —á–∏—Å—Ç–∏–º DOM: –Ω–∏–∫–∞–∫–∏—Ö —Ñ–æ–Ω–æ–≤/–º–∞—Å–æ–∫, –∏ —É–¥–∞–ª—è–µ–º <img>
    silhouetteStroke.style.backgroundImage = '';
    silhouetteStroke.style.webkitMaskImage = '';
    silhouetteStroke.style.maskImage = '';
    while (silhouetteStroke.firstChild) silhouetteStroke.removeChild(silhouetteStroke.firstChild);
    return;
  }

  // 1) —Å—Ç—Ä–æ–∏–º —Ü–≤–µ—Ç–Ω–æ–µ –∫–æ–ª—å—Ü–æ (PNG dataURL)
  const coloredRingURL = await buildColoredRing(maskURL, Math.max(1, strokeWidthPx), strokeColor);
  if (!coloredRingURL){
    silhouetteStroke.classList.remove('active');
    while (silhouetteStroke.firstChild) silhouetteStroke.removeChild(silhouetteStroke.firstChild);
    return;
  }

  // 2) **–Ω–∏–∫–∞–∫–∏—Ö mask/background-image** ‚Äî —Ç–æ–ª—å–∫–æ <img>
  silhouetteStroke.style.webkitMaskImage = '';
  silhouetteStroke.style.maskImage = '';
  silhouetteStroke.style.backgroundImage = 'none';
  silhouetteStroke.style.background = 'transparent';

  // —Å–æ–∑–¥–∞—ë–º/–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º <img>
  let imgEl = silhouetteStroke.querySelector('img');
  if (!imgEl){
    imgEl = document.createElement('img');
    imgEl.alt = '';
    imgEl.decoding = 'async';
    imgEl.loading = 'eager';
    silhouetteStroke.appendChild(imgEl);
  }

  // cache-buster –¥–ª—è iOS, —á—Ç–æ–± –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–ª —Å—Ç–∞—Ä—ã–π dataURL –∏–∑ –∫–µ—à–∞
  imgEl.src = coloredRingURL + '#' + Date.now();

  silhouetteStroke.classList.add('active');

silhouetteStroke.style.background = 'transparent';


  // –ª—ë–≥–∫–∏–π ¬´–ø–∏–Ω–æ–∫¬ª WebKit
  silhouetteStroke.style.transform += ' translateZ(0)';
  void silhouetteStroke.offsetHeight;
  silhouetteStroke.style.transform = silhouetteStroke.style.transform.replace(' translateZ(0)', '');
}







// === –®–£–ú –î–õ–Ø –ì–†–ê–î–ò–ï–ù–¢–ê ===
function makeNoiseTexture(tile=64, alpha=28) {
  const c = document.createElement('canvas');
  c.width = c.height = tile;
  const ctx = c.getContext('2d');
  const img = ctx.createImageData(tile, tile);
  const d = img.data;
  for (let i = 0; i < d.length; i += 4) {
    const v = Math.random() * 255 | 0;
    d[i] = d[i+1] = d[i+2] = v;
    d[i+3] = alpha;
  }
  ctx.putImageData(img, 0, 0);
  return c.toDataURL('image/png');
}

function applyGrain() {
  if (!grain) return;
  if (noiseIntensity <= 0) {
    grain.hidden = true;
    grain.style.backgroundImage = '';
    return;
  }
  if (!noiseURL) noiseURL = makeNoiseTexture(512, 255); // –∫—Ä—É–ø–Ω—ã–π —Ç–∞–π–ª –ø–æ –¥–µ—Ñ–æ–ª—Ç—É
  grain.style.backgroundImage = `url(${noiseURL})`;
  grain.style.backgroundSize = `${noiseSizePx}px ${noiseSizePx}px`;
  grain.style.opacity = noiseIntensity.toFixed(2);
  grain.hidden = false;
}

// === –ì–†–ê–î–ò–ï–ù–¢ ===
const FEATHER = 8;

function buildThreeStopGradient() {
  const a = gradA?.value || '#ff6b6b';
  const b = gradB?.value || '#4d96ff';
  const c = gradC?.value || '#00c9a7';
  const ang = Number(gradAngle?.value ?? 180);

  let p1 = Number(gradBias1?.value ?? 33);
  let p2 = Number(gradBias2?.value ?? 66);

  p1 = clamp(p1, 0, 100);
  p2 = clamp(p2, 0, 100);
  if (p2 < p1) p2 = p1;

  const f1 = Math.min(FEATHER, p1);
  const f2 = Math.min(FEATHER, 100 - p2);

  const css = `linear-gradient(${ang}deg,
    ${a} 0%, ${a} ${p1 - f1}%,
    ${b} ${p1 + f1}%, ${b} ${p2 - f2}%,
    ${c} ${p2 + f2}%, ${c} 100%)`;

  return css.replace(/\s+/g, ' ');
}

function applyGradientLive(){
  if (!bgLayer) return;
  bgLayer.style.backgroundImage = buildThreeStopGradient();
  bgLayer.hidden = false;
  applyGrain();
}

function openGrad(){
  if (!gradModal) return;
  gradModal.hidden = false;
  if (gradNoise)     gradNoise.value     = Math.round(noiseIntensity * 100);
  if (gradNoiseSize) gradNoiseSize.value = noiseSizePx;
  applyGradientLive();
}

function closeGrad(){
  if (!gradModal) return;
  gradModal.hidden = true;
}

function randomGradient() {
  const randomColor = () => '#' + Math.floor(Math.random()*16777215).toString(16).padStart(6, '0');

  gradA.value = randomColor();
  gradB.value = randomColor();
  gradC.value = randomColor();
  gradAngle.value = rand(0, 360);

  let p1 = rand(10, 45);
  let p2 = rand(p1 + 10, 90);
  gradBias1.value = p1;
  gradBias2.value = p2;

  // —Ä–∞–Ω–¥–æ–º —à—É–º–∞
  noiseIntensity = Math.random() < .8 ? rand(5, 30) / 100 : 0; // 0..0.3
  noiseSizePx    = rand(300, 800);
  if (gradNoise)     gradNoise.value     = Math.round(noiseIntensity * 100);
  if (gradNoiseSize) gradNoiseSize.value = noiseSizePx;

  applyGradientLive();
}

gradNoise?.addEventListener('input', () => {
  noiseIntensity = clamp(+gradNoise.value / 100, 0, 1);
  applyGrain();
});
gradNoiseSize?.addEventListener('input', () => {
  noiseSizePx = Math.max(1, +gradNoiseSize.value || 3);
  applyGrain();
});

function clearBackgroundAll(){
  if (bgLayer){
    bgLayer.style.backgroundImage   = '';
    bgLayer.style.backgroundSize    = '';
    bgLayer.style.backgroundRepeat  = '';
    bgLayer.style.backgroundPosition= '';
    bgLayer.hidden = true;
  }
  noiseIntensity = 0;
  noiseURL = '';
  applyGrain();
}

// === –°–ò–õ–£–≠–¢ ===
async function roundCorners() {
  // –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ: –∫–∞–∂–¥—ã–π —Ä–∞–∑ –∑–∞–ø–µ–∫–∞–µ–º —Ç–æ, —á—Ç–æ –≤–∏–¥–Ω–æ –Ω–∞ —Å—Ü–µ–Ω–µ —Å–µ–π—á–∞—Å

  const SCALE = 2;
  const { width, height } = stage.getBoundingClientRect();

  // –∑–∞–ø–æ–º–Ω–∏–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–ª—É—ç—Ç–∞/–æ–±–≤–æ–¥–∫–∏
  const wasRounded   = isRounded;
  const prevMaskURL  = maskURL;
  const wasStroke    = strokeOnSil;
  const prevAlpha    = Number.isFinite(silAlpha)
    ? silAlpha
    : (parseFloat(getComputedStyle(silhouetteFill).opacity) || 1);
  const ty           = (getTranslateY(overlay) || 0) * SCALE;

  // 1) –°–Ω–∞–ø–∏–º —Å—Ü–µ–Ω—É –ë–ï–ó overlay (html2canvas –Ω–µ –ª—é–±–∏—Ç css-mask)
  const snap = stage.cloneNode(true);
  const snapOverlay = snap.querySelector('#overlay');
  if (snapOverlay) snapOverlay.hidden = true;

  Object.assign(snap.style, {
    position: 'fixed', left: '-99999px', top: '0',
    width: width + 'px', height: height + 'px'
  });
  document.body.appendChild(snap);

   // –í–†–ï–ú–ï–ù–ù–û –ø—Ä—è—á–µ–º overlay, —á—Ç–æ–±—ã html2canvas –Ω–µ –≤–∏–¥–µ–ª css-mask
  const overlayWasHidden = overlay.hidden;
  overlay.hidden = true;
  
  const baseCanvas = await html2canvas(snap, {
    backgroundColor: '#ffffff',
    scale: SCALE,
    useCORS: true,
    scrollX: 0, scrollY: 0,
    windowWidth: width, windowHeight: height
  });
  
  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º overlay –∫–∞–∫ –±—ã–ª–æ
  overlay.hidden = overlayWasHidden;

  document.body.removeChild(snap);

  // 2) –î–æ—Ä–∏—Å—É–µ–º –Ω–∞ –∫–æ–ø–∏—é –≤—Å—ë, —á—Ç–æ overlay –ø–æ–∫–∞–∑—ã–≤–∞–ª —Ä–∞–Ω—å—à–µ (–∑–∞–ª–∏–≤–∫—É –∏ –æ–±–≤–æ–¥–∫—É)
  const flat = document.createElement('canvas');
  flat.width  = baseCanvas.width;
  flat.height = baseCanvas.height;
  const fctx = flat.getContext('2d');
  fctx.drawImage(baseCanvas, 0, 0);

  if (wasRounded && prevMaskURL) {
    // 2–∞) —Å—Ç–∞—Ä–∞—è –æ–±–≤–æ–¥–∫–∞ –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞ (–µ—Å–ª–∏ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞)
    if (wasStroke) {
      let ringURL = (getComputedStyle(silhouetteStroke).webkitMaskImage ||
                     getComputedStyle(silhouetteStroke).maskImage || '').toString();
      if (ringURL.startsWith('url(')) {
        ringURL = ringURL.slice(4, -1).replaceAll('"','').replaceAll("'","");
      } else {
        ringURL = await buildOuterStrokeMask(prevMaskURL, Math.max(1, strokeWidthPx));
      }
      if (ringURL) {
        const ring = await loadImage(ringURL);
        const sCanvas = document.createElement('canvas');
        sCanvas.width = flat.width; sCanvas.height = flat.height;
        const sctx = sCanvas.getContext('2d');
        sctx.fillStyle = strokeColor;
        sctx.fillRect(0,0,sCanvas.width,sCanvas.height);
        sctx.globalCompositeOperation = 'destination-in';
        sctx.drawImage(ring, 0, 0, sCanvas.width, sCanvas.height);
        sctx.globalCompositeOperation = 'source-over';
        fctx.drawImage(sCanvas, 0, ty);
      }
    }

    // 2–±) —Å—Ç–∞—Ä–∞—è –∑–∞–ª–∏–≤–∫–∞ —Å–∏–ª—É—ç—Ç–∞ (—Å —É—á—ë—Ç–æ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏)
    const cs   = getComputedStyle(silhouetteFill);
    const bgImg= cs.backgroundImage;
    const bgCol= cs.backgroundColor;

    const fill = document.createElement('canvas');
    fill.width = flat.width; fill.height = flat.height;
    const ctx = fill.getContext('2d');

    if (bgImg && bgImg.startsWith('linear-gradient')) {
      paintGradient(ctx, fill.width, fill.height, bgImg);
    } else if (bgImg && bgImg.startsWith('url(')) {
      const url = bgImg.slice(4, -1).replaceAll('"','').replaceAll("'","");
      try {
        const img = await loadImage(url);
        ctx.drawImage(img, 0, 0, fill.width, fill.height);
      } catch {
        ctx.fillStyle = (bgCol && bgCol !== 'rgba(0, 0, 0, 0)') ? bgCol : (currentInk || '#000');
        ctx.fillRect(0,0,fill.width,fill.height);
      }
    } else {
      ctx.fillStyle = (bgCol && bgCol !== 'rgba(0, 0, 0, 0)') ? bgCol : (currentInk || '#000');
      ctx.fillRect(0,0,fill.width,fill.height);
    }

    const mImg = await loadImage(prevMaskURL);
    ctx.globalCompositeOperation = 'destination-in';
    ctx.drawImage(mImg, 0, 0, fill.width, fill.height);
    ctx.globalCompositeOperation = 'source-over';

    if (prevAlpha < 1) {                // –ø—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–∂–Ω—é—é –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
      ctx.globalCompositeOperation = 'destination-in';
      ctx.fillStyle = `rgba(0,0,0,${prevAlpha})`;
      ctx.fillRect(0, 0, fill.width, fill.height);
      ctx.globalCompositeOperation = 'source-over';
    }

    fctx.drawImage(fill, 0, ty);
  }

  // 3) –ò–∑ ¬´–ø–ª–æ—Å–∫–æ–π¬ª –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å—Ç—Ä–æ–∏–º –ù–û–í–£–Æ –º–∞—Å–∫—É (–ø–æ—Ä–æ–≥–æ–º)
  const work = document.createElement('canvas');
  work.width = flat.width; work.height = flat.height;
  const wctx = work.getContext('2d');

  wctx.filter = 'blur(3.5px)';
  wctx.drawImage(flat, 0, 0);
  wctx.filter = 'none';

  const img = wctx.getImageData(0, 0, work.width, work.height);
  const d = img.data, THRESHOLD = 140;
  for (let i = 0; i < d.length; i += 4) {
    const r = d[i], g = d[i+1], b = d[i+2];
    const lum = 0.2126*r + 0.7152*g + 0.0722*b;
    d[i] = d[i+1] = d[i+2] = 255;
    d[i+3] = lum < THRESHOLD ? 255 : 0;
  }
  wctx.putImageData(img, 0, 0);
  maskURL = work.toDataURL('image/png');

  // 4) –ü–æ–¥–º–µ–Ω—è–µ–º overlay –Ω–∞ –ù–û–í–´–ô —Å–∏–ª—É—ç—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è –ø—Ä–µ–∂–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  overlay.hidden = false;
  overlay.style.background = 'transparent';
  overlay.style.transform = '';

  silhouetteFill.style.background = currentInk;
  silhouetteFill.style.webkitMaskImage = `url(${maskURL})`;
  silhouetteFill.style.maskImage      = `url(${maskURL})`;
  silhouetteFill.classList.add('active');

  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–∂–Ω—é—é —Ñ–∞–∫—Ç–∏—á–µ—Å–∫—É—é –∞–ª—å—Ñ—É —Å–∏–ª—É—ç—Ç–∞ (–≤–∞–∂–Ω–æ –¥–ª—è ¬´—Ç–æ–ª—å–∫–æ –æ–±–≤–æ–¥–∫–∞¬ª)
  if (Number.isFinite(prevAlpha)) {
    silAlpha = prevAlpha;
    silhouetteFill.style.opacity = prevAlpha.toFixed(2);
  }

  // –∫–æ–º–ø–æ–∑–∏—Ü–∏—é –ø—Ä—è—á–µ–º
  composition.style.visibility = 'hidden';

  // –í–ê–ñ–ù–û: –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —Ñ–ª–∞–≥ –æ–±–≤–æ–¥–∫–∏ ‚Äî –µ—Å–ª–∏ –±—ã–ª–∞ –≤–∫–ª—é—á–µ–Ω–∞, –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∫–ª—é—á—ë–Ω–Ω–æ–π
  await applySilhouetteStroke();

  // –ª–∞–π–≤-–æ–±–≤–æ–¥–∫—É –Ω–µ –≤–∫–ª—é—á–∞–µ–º (–æ–Ω–∞ —É–∂–µ –∑–∞–ø–µ–∫–∞–µ—Ç—Å—è –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö —Å–Ω–∞–ø–∞—Ö)
  if (liveStrokeOn) { liveStrokeOn = false; applyLiveStroke(); }

  isRounded = true;
  if (btnUndo) btnUndo.hidden = false;
}




function undoAll(){
  if (composition) composition.style.visibility = 'visible';
  resetRoundState({force:true});

  liveStrokeOn = false;
  strokeOnSil  = false;
  applyLiveStroke();

  if (silhouetteStroke){
    silhouetteStroke.classList.remove('active');
    silhouetteStroke.style.webkitMaskImage = '';
    silhouetteStroke.style.maskImage = '';
  }
  if (overlay){
    overlay.style.transform = '';
  }
  if (silhouetteFill){
    silhouetteFill.style.transform = '';
  }
  if (btnUndo) btnUndo.hidden = true;
}

// === –î–í–ò–ñ–ï–ù–ò–ï –ö–û–ú–ü–û–ó–ò–¶–ò–ò ===
function applyCompositionShift() {
  if (!composition) return;
  const baseRect = composition.getBoundingClientRect();
  const compH = baseRect.height || 0;
  const px = Math.round(compH * SHIFT_FACTOR);
  const offset = compShiftState === 1 ? -px : compShiftState === -1 ? px : 0;

  const t = `translateY(${offset}px)`;
  composition.style.transform = t;

  if (isRounded) {
    overlay.style.transform = t;
    silhouetteFill.style.transform = '';
    if (silhouetteStroke) silhouetteStroke.style.transform = '';
  }
}

// —Ö–µ–ª–ø–µ—Ä: –≤—ã—Ç–∞—â–∏—Ç—å translateY(px) –∏–∑ transform
function getTranslateY(el){
  if (!el) return 0;
  const tr = getComputedStyle(el).transform;
  if (!tr || tr === 'none') return 0;
  // matrix(a,b,c,d,tx,ty)
  const m = tr.match(/matrix\(([^)]+)\)/);
  if (m) {
    const p = m[1].split(',').map(v=>parseFloat(v));
    return p[5] || 0;
  }
  const t = tr.match(/translateY\((-?\d+(?:\.\d+)?)px\)/i);
  return t ? parseFloat(t[1]) : 0;
}


function kickSafariRepaint(el){
  if (!el) return;
  el.style.transform += ' rotate(0.0001deg)';
  void el.offsetHeight;
  el.style.transform = el.style.transform.replace(' rotate(0.0001deg)', '');
}

async function buildColoredRing(baseMaskURL, growPx, color){
  // 1) –ø–æ–ª—É—á–∞–µ–º –∞–ª—å—Ñ–∞-–∫–æ–ª—å—Ü–æ (–∫–∞–∫ —É —Ç–µ–±—è, –∏–ª–∏ —á–µ—Ä–µ–∑ —Ñ-—é –Ω–∏–∂–µ)
  const ringMaskURL = await buildOuterStrokeMask(baseMaskURL, Math.max(1, growPx));
  if (!ringMaskURL) return '';

  // 2) –∫—Ä–∞—Å–∏–º –∫–æ–ª—å—Ü–æ –≤ color ‚Üí –ø–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—É—é RGBA-–∫–∞—Ä—Ç–∏–Ω–∫—É
  const maskImg = await loadImage(ringMaskURL);
  const w = maskImg.width, h = maskImg.height;

  const c = document.createElement('canvas'); c.width = w; c.height = h;
  const ctx = c.getContext('2d');

  // —Ñ–æ–Ω ‚Äî –Ω–∞—à —Ü–≤–µ—Ç
  ctx.clearRect(0,0,w,h);
  ctx.fillStyle = color;
  ctx.fillRect(0,0,w,h);

  // –≤—ã—Ä–µ–∑–∞–µ–º —Ü–≤–µ—Ç –ø–æ –∞–ª—å—Ñ–µ –∫–æ–ª—å—Ü–∞
  ctx.globalCompositeOperation = 'destination-in';
  ctx.drawImage(maskImg, 0, 0, w, h);
  ctx.globalCompositeOperation = 'source-over';

  return c.toDataURL('image/png');
}



async function downloadPng(){
  const SCALE = window.devicePixelRatio || 2;
  const { width, height } = stage.getBoundingClientRect();

  // 1) –±–∞–∑–∞: –∫–ª–æ–Ω —Å—Ü–µ–Ω—ã –ë–ï–ó overlay, –ë–ï–ó —Å–∫—Ä—É–≥–ª–µ–Ω–∏–π —Ä–∞–º–∫–∏
  const baseClone = stage.cloneNode(true);
  const baseOv = baseClone.querySelector('#overlay');
  if (baseOv) baseOv.hidden = true;

  baseClone.classList.add('exporting');
  baseClone.style.border = '0';
  baseClone.style.borderRadius = '0';

  Object.assign(baseClone.style, {
    position:'fixed', left:'-99999px', top:'0',
    width: width + 'px', height: height + 'px'
  });
  document.body.appendChild(baseClone);

  const baseCanvas = await html2canvas(baseClone, {
    backgroundColor: null,
    scale: SCALE,
    useCORS: true,
    scrollX: 0, scrollY: 0,
    windowWidth: width, windowHeight: height
  });

  document.body.removeChild(baseClone);

  // 2) –∏—Ç–æ–≥–æ–≤—ã–π —Ö–æ–ª—Å—Ç
  const out = document.createElement('canvas');
  out.width  = baseCanvas.width;
  out.height = baseCanvas.height;
  const octx = out.getContext('2d');
  octx.imageSmoothingEnabled = true;

  // –±–∞–∑–∞ (—Ñ–æ–Ω/–≥—Ä–∞–¥–∏–µ–Ω—Ç/—à—É–º/–∂–∏–≤–∞—è —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ —Ç.–ø.)
  octx.drawImage(baseCanvas, 0, 0);

  // –≤—ã—á–∏—Å–ª–∏–º —Å–¥–≤–∏–≥ —Å–∏–ª—É—ç—Ç–∞ (px –≤ —Ä–µ–Ω–¥–µ—Ä-—Å–∫–µ–π–ª–µ)
  const ty = (getTranslateY(overlay) || 0) * SCALE;

  // 3) –û–ë–í–û–î–ö–ê –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
 // 3) –û–ë–í–û–î–ö–ê –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞ (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞)
if (isRounded && strokeOnSil && maskURL){
  // –ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –≥–æ—Ç–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∫–æ–ª—å—Ü–∞ –∏–∑ <img>
  let ringURL = silhouetteStroke?.querySelector('img')?.src || '';

  // –µ—Å–ª–∏ –ø–æ –∫–∞–∫–æ–π-—Ç–æ –ø—Ä–∏—á–∏–Ω–µ –µ—ë –Ω–µ—Ç ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º
  if (!ringURL || ringURL.startsWith('data:') === false){
    ringURL = await buildColoredRing(maskURL, Math.max(1, strokeWidthPx), strokeColor);
  }

  if (ringURL){
    const ringImg = await loadImage(ringURL);
    // —Ä–∏—Å—É–µ–º –∫–∞–∫ –µ—Å—Ç—å (—ç—Ç–æ —É–∂–µ —Ü–≤–µ—Ç–Ω–∞—è PNG —Å –∞–ª—å—Ñ–æ–π)
    octx.drawImage(ringImg, 0, ty, out.width, out.height);
  }
}


  // 4) –ó–ê–õ–ò–í–ö–ê —Å–∏–ª—É—ç—Ç–∞ (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–Ω–∞)
  if (isRounded && silhouetteFill.classList.contains('active') && maskURL){
    const cs = getComputedStyle(silhouetteFill);
    const bgImg = cs.backgroundImage;
    const bgCol = cs.backgroundColor;
    const alpha = Number.isFinite(silAlpha) ? silAlpha : 1;

    const fill = document.createElement('canvas');
    fill.width = out.width; fill.height = out.height;
    const fctx = fill.getContext('2d');

    // —Ñ–æ–Ω –∑–∞–ª–∏–≤–∫–∏: –≥—Ä–∞–¥–∏–µ–Ω—Ç / –∫–∞—Ä—Ç–∏–Ω–∫–∞ / —Ü–≤–µ—Ç
    if (bgImg && bgImg.startsWith('linear-gradient')) {
      paintGradient(fctx, fill.width, fill.height, bgImg);
    } else if (bgImg && bgImg.startsWith('url(')) {
      const url = bgImg.slice(4, -1).replaceAll('"','').replaceAll("'","");
      try {
        const img = await loadImage(url);
        fctx.drawImage(img, 0, 0, fill.width, fill.height);
      } catch {
        fctx.fillStyle = (bgCol && bgCol !== 'rgba(0, 0, 0, 0)') ? bgCol : (currentInk || '#000');
        fctx.fillRect(0,0,fill.width,fill.height);
      }
    } else {
      fctx.fillStyle = (bgCol && bgCol !== 'rgba(0, 0, 0, 0)') ? bgCol : (currentInk || '#000');
      fctx.fillRect(0,0,fill.width,fill.height);
    }

// ...
// 3–±) –ø—Ä–∏–º–µ–Ω—è–µ–º –∞–ª—å—Ñ–∞-–º–∞—Å–∫—É —Å–∏–ª—É—ç—Ç–∞
const mImg = await loadImage(maskURL);
fctx.globalCompositeOperation = 'destination-in';
fctx.drawImage(mImg, 0, 0, fill.width, fill.height);
fctx.globalCompositeOperation = 'source-over';

// 3–≤) –ø—Ä–∏–º–µ–Ω—è–µ–º –û–ü–ê–°–ò–¢–ò —Å–∏–ª—É—ç—Ç–∞ (–±–µ–∑ getImageData)
// ...–ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ —Ç—ã —Å–¥–µ–ª–∞–ª destination-in –º–∞—Å–∫–æ–π mImg:
if (alpha < 1) {
  fctx.globalCompositeOperation = 'destination-in';
  fctx.fillStyle = `rgba(0,0,0,${alpha})`;
  fctx.fillRect(0, 0, fill.width, fill.height);
  fctx.globalCompositeOperation = 'source-over';
}

// —Ä–∏—Å—É–µ–º —Å–æ —Å–¥–≤–∏–≥–æ–º
octx.drawImage(fill, 0, ty);


  }

  // 5) —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å PNG
  out.toBlob((blob)=>{
    if (!blob) return;
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = 'print.png';
    document.body.appendChild(a);
    a.click();
    a.remove();
    URL.revokeObjectURL(url);
  }, 'image/png');
}


// === –ö–†–ï–°–¢–´/–ú–ò–ö–†–û/–ü–£–ó–´–†–ò ===
function clearCrosses(){ if (decors) decors.innerHTML = ''; }

function toggleCrosses(){
  if (!decors) return;
  if (decors.childElementCount > 0){
    clearCrosses(); resetRoundState(); return;
  }
  const howMany = rand(1, 5);

  const textRect = composition.getBoundingClientRect();
  const l1Rect = line1.getBoundingClientRect();
  const l2Rect = line2.getBoundingClientRect();

  const minX = Math.min(l1Rect.left, l2Rect.left) - textRect.left;
  const maxX = Math.max(l1Rect.right, l2Rect.right) - textRect.left;
  const minY = Math.min(l1Rect.top, l2Rect.top) - textRect.top;
  const maxY = Math.max(l1Rect.bottom, l2Rect.bottom) - textRect.top;

  const pad = 40;
  const areaLeft   = Math.max(0, minX - pad);
  const areaTop    = Math.max(0, minY - pad);
  const areaRight  = Math.min(textRect.width, maxX + pad);
  const areaBottom = Math.min(textRect.height, maxY + pad);

  for (let i = 0; i < howMany; i++) {
    const s = rand(18, 42);
    const thickness = Math.max(4, Math.round(s * 0.08));
    const x = rand(areaLeft, areaRight - s);
    const y = rand(areaTop, areaBottom - s);

    const el = document.createElement('div');
    el.className = 'cross';
    el.style.setProperty('--cross-size', s + 'px');
    el.style.setProperty('--cross-thickness', thickness + 'px');
    el.style.left = x + 'px';
    el.style.top  = y + 'px';
    el.style.setProperty('--cross-opacity', (rand(100, 100) / 100).toString());

    decors.appendChild(el);
  }
  resetRoundState();
}

// === –°–û–ë–´–¢–ò–Ø UI ===
btnGenerate?.addEventListener('click', generate);
btnRound?.addEventListener('click', roundCorners);
btnDownload?.addEventListener('click', downloadPng);
btnUndo?.addEventListener('click', undoAll);

btnMoveUp?.addEventListener('click', () => { compShiftState = Math.min(1, compShiftState + 1); applyCompositionShift(); });
btnMoveDown?.addEventListener('click', () => { compShiftState = Math.max(-1, compShiftState - 1); applyCompositionShift(); });
window.addEventListener('resize', applyCompositionShift);

btnCringe?.addEventListener('click', () => {
  const outlined = stage.querySelectorAll('.ch.outlined');
  if (outlined.length) {
    outlined.forEach(n => n.classList.remove('outlined'));
  } else {
    const letters = [...line1.querySelectorAll('.ch'), ...line2.querySelectorAll('.ch')];
    if (letters.length) {
      const howMany = rand(1, Math.min(3, letters.length));
      const poolIdx = Array.from({length: letters.length}, (_, i) => i);
      shuffle(poolIdx).slice(0, howMany).forEach(i => letters[i].classList.add('outlined'));
    }
  }
  resetRoundState();
  applyCompositionShift();
});

btnCrosses?.addEventListener('click', toggleCrosses);

btnMicro?.addEventListener('click', () => {
  const t = I18N[currentLang];
  const txt = prompt(t.micro_prompt_title, t.micro_prompt_default);
  if (!txt) return;

  removeMicro();
  const words = txt.trim().split(/\s+/).filter(Boolean);
  if (!words.length) return;

  const row = document.createElement('div');
  row.className = 'micro-row';
  row.dataset.size = ['sm','md','lg'][rand(0,2)];
  row.style.fontFamily = `'${sample(SANS_POOL)}', system-ui, sans-serif`;

  for (const w of words){
    const chip = document.createElement('span');
    chip.className = 'micro-chip';
    chip.textContent = w;
    row.appendChild(chip);
  }

  if (words.length === 1) row.style.justifyContent = 'center';
  if (Math.random() < 0.5) composition.insertBefore(row, line1);
  else composition.insertBefore(row, line2.nextSibling);

  resetRoundState();
  applyCompositionShift();
});


btnInvert?.addEventListener('click', () => {
  const toLight = !stage.classList.contains('light');
  stage.classList.toggle('light');
  currentInk = toLight ? '#ffffff' : '#000000';
  if (isRounded) silhouetteFill.style.background = currentInk;
  else composition.style.color = currentInk;
});

// —Ñ–æ–Ω
btnBg?.addEventListener('click', () => inpBgUpload?.click());
inpBgUpload?.addEventListener('change', (e) => {
  const file = e.target.files?.[0];
  if (!file) return;
  if (currentBgUrl) { URL.revokeObjectURL(currentBgUrl); currentBgUrl=''; }
  currentBgUrl = URL.createObjectURL(file);
  if (bgLayer){
    bgLayer.style.backgroundImage = `url(${currentBgUrl})`;
    bgLayer.hidden = false;
  }
});
btnBgClear?.addEventListener('click', clearBackgroundAll);

// –≥—Ä–∞–¥–∏–µ–Ω—Ç
btnGradToggle?.addEventListener('click', openGrad);
btnGradClose?.addEventListener('click', closeGrad);
btnGradDone?.addEventListener('click', closeGrad);
btnGradClear?.addEventListener('click', clearBackgroundAll);

document.getElementById('gradRandom')?.addEventListener('click', randomGradient);
[gradA, gradB, gradC, gradAngle, gradBias1, gradBias2].forEach(el=>{
  el?.addEventListener('input', applyGradientLive);
});

// —à—É–º (–ø–æ–ª–∑—É–Ω–∫–∏)
gradNoise?.addEventListener('input', () => {
  noiseIntensity = clamp(+gradNoise.value / 100, 0, 1);
  applyGrain();
});
gradNoiseSize?.addEventListener('input', () => {
  noiseSizePx = Math.max(1, +gradNoiseSize.value || 3);
  applyGrain();
});

// —Ü–≤–µ—Ç/–∞–ª—å—Ñ–∞ + –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∏–Ω–ø—É—Ç—ã –æ–±–≤–æ–¥–∫–∏ –≤ –º–æ–¥–∞–ª–∫–µ
btnColorToggle?.addEventListener('click', openColor);
colorClose?.addEventListener('click', ()=> colorModal.hidden = true);
colorDone?.addEventListener('click', ()=> colorModal.hidden = true);
colorModal?.addEventListener('click', e=>{ if(e.target===e.currentTarget) colorModal.hidden = true; });

function openColor(){ 
  colorModal.hidden = false;
  if (colorPick)  colorPick.value  = currentInk;
  if (colorAlpha) colorAlpha.value = Math.round((silAlpha ?? 1) * 100);
  if (strokeColorInput)    strokeColorInput.value    = strokeColor;
  if (strokeWidthInput)    strokeWidthInput.value    = strokeWidthPx;
  if (strokeEnabledInput)  strokeEnabledInput.checked = !!strokeOnSil; // <-- –±—ã–ª–æ strokeEnabled
}


colorPick?.addEventListener('input', ()=>{
  currentInk = colorPick.value;
  if (isRounded && silhouetteFill.classList.contains('active')) {
    silhouetteFill.style.background = currentInk;
  } else {
    composition.style.color = currentInk;
  }
});
colorAlpha?.addEventListener('input', ()=>{
  if (isRounded && silhouetteFill.classList.contains('active')) {
    const a = (+colorAlpha.value/100);
    silAlpha = a;                             // ‚Üê —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    silhouetteFill.style.opacity = a.toFixed(2); // –≤–∏–∑—É–∞–ª—å–Ω–æ –≤ UI
  }
});
strokeColorInput?.addEventListener('input', async ()=>{
  strokeColor = strokeColorInput.value || strokeColor;
  applyLiveStroke();
  await applySilhouetteStroke();
});
strokeWidthInput?.addEventListener('input', async ()=>{
  strokeWidthPx = Math.max(1, +strokeWidthInput.value || 10);
  applyLiveStroke();
  await applySilhouetteStroke();
});
strokeEnabledInput?.addEventListener('change', async ()=>{
  strokeEnabled = !!strokeEnabledInput.checked;
  if (isRounded){
    strokeOnSil = strokeEnabled;
    await applySilhouetteStroke();
  }
});





const btnBgPin = document.getElementById('bgPin');

async function randomPinterestBg(){
  try {
    // URL –≤–æ—Ä–∫–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    // https://weirdcore-proxy.your-subdomain.workers.dev/?q=weirdcore%20aesthetic
    const workerURL = 'https://<—Ç–≤–æ—è_–∑–æ–Ω–∞>.workers.dev/?q=' + encodeURIComponent('weirdcore aesthetic') + '&_=' + Date.now();

    // –ø—Ä–æ—Å—Ç–æ —Å—Ç–∞–≤–∏–º –µ–≥–æ –∫–∞–∫ —Ñ–æ–Ω–æ–≤—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É
    bgLayer.style.backgroundImage = `url(${workerURL})`;
    bgLayer.hidden = false;
  } catch (e) {
    console.error(e);
    // fallback ‚Äî Unsplash/Picsum
    await setBgUrl(randomUnsplashUrl());
  }
}

btnBgPin?.addEventListener('click', randomPinterestBg);


// –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ ¬´–û–±–≤–æ–¥–∫–∞¬ª ‚Äî –∏ –¥–æ, –∏ –ø–æ—Å–ª–µ —Å–∏–ª—É—ç—Ç–∞
strokeToggle?.addEventListener('click', async ()=>{
  if (!isRounded){
    // –ñ–∏–≤–∞—è –æ–±–≤–æ–¥–∫–∞ –¥–æ —Å–∏–ª—É—ç—Ç–∞
    liveStrokeOn = !liveStrokeOn;
    applyLiveStroke();
  } else {
    // –û–±–≤–æ–¥–∫–∞ –≤–æ–∫—Ä—É–≥ —Å–∏–ª—É—ç—Ç–∞
    strokeOnSil = !strokeOnSil;
    // –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ overlay –≤–∏–¥–µ–Ω
    overlay.hidden = false;
    // —Ñ–æ—Ä—Å–∏–º –ø–µ—Ä–µ—Å—á—ë—Ç –∫–æ–ª—å—Ü–∞ –∫–∞–∂–¥—ã–π —Ä–∞–∑ (–º–æ–∂–Ω–æ –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏)
    await applySilhouetteStroke();
  }
});

const btnBgRandom = document.getElementById('bgRandom');

btnBgRandom?.addEventListener('click', () => {
  setBgUrl(randomUnsplashUrl());
});



function randomPicsumUrl(){
  const w = 1080, h = 1440; // 3:4 –ø–æ–¥ –≤–∞—à—É —Å—Ü–µ–Ω—É
  return `https://picsum.photos/${w}/${h}?random=${Date.now()}`;
}

function randomUnsplashUrl(){
  const q = encodeURIComponent('weirdcore aesthetic');
  return `https://source.unsplash.com/random/1080x1440/?${q}&_=${Date.now()}`;
}


async function setBgUrl(url){
  try {
    const resp = await fetch(url, {
      cache: 'no-store',
      redirect: 'follow',
      referrerPolicy: 'no-referrer'
    });
    if (!resp.ok) throw new Error(`HTTP ${resp.status}`);

    const blob = await resp.blob();
    if (currentBgBlobUrl) URL.revokeObjectURL(currentBgBlobUrl);
    currentBgBlobUrl = URL.createObjectURL(blob);

    bgLayer.style.backgroundImage = `url(${currentBgBlobUrl})`;
    bgLayer.hidden = false;
  } catch (e) {
    console.error('bg load failed', e);
    // –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π —Ñ–æ–ª–ª–±–µ–∫, —á—Ç–æ–±—ã –Ω–µ —É–π—Ç–∏ –≤ —Ä–µ–∫—É—Ä—Å–∏—é
    if (!/picsum\.photos/.test(url)) {
      const fallback = `https://picsum.photos/seed/${Date.now()}/1080/1440`;
      setBgUrl(fallback);
    }
  }
}



// –ø–µ—Ä–≤–∏—á–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
generate();

// --- –ü–µ—Ä–µ–Ω–æ—Å footer –ø–æ–¥ #stage —Ç–æ–ª—å–∫–æ –Ω–∞ –º–æ–±–∏–ª–∫–µ ---
const footerEl = document.querySelector('footer');
const stageEl  = document.getElementById('stage');

let footerHomeParent = footerEl?.parentElement || null;
let footerHomeNext   = footerEl?.nextSibling || null;

function placeFooterByViewport(){
  if (!footerEl || !stageEl) return;
  const isMobile = window.matchMedia('(max-width: 768px)').matches;

  if (isMobile) {
    // –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Å—Ä–∞–∑—É –ü–û–°–õ–ï #stage (–Ω–µ –≤–Ω—É—Ç—Ä—å –Ω–µ–≥–æ)
    if (stageEl.nextElementSibling !== footerEl) stageEl.after(footerEl);
    // –≤–¥—Ä—É–≥ –≥–¥–µ-—Ç–æ –±—ã–ª display:none
    footerEl.style.display = '';
  } else {
    // –≤–µ—Ä–Ω—É—Ç—å –Ω–∞ –º–µ—Å—Ç–æ
    if (footerHomeParent && !footerHomeParent.contains(footerEl)) {
      if (footerHomeNext) footerHomeParent.insertBefore(footerEl, footerHomeNext);
      else footerHomeParent.appendChild(footerEl);
    }
  }
}

// –∑–∞–ø—É—Å–∫ –∏ –ø–æ–¥–ø–∏—Å–∫–∞
placeFooterByViewport();
window.addEventListener('resize', placeFooterByViewport);

